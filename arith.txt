整数演算パッケージ Arithmetica for AWK
======================================
Hadamard Edition

概要
----
Arithmetica はAWK で大きな整数を扱うためのスクリプトである。
対象となる AWK 処理系は、コマンドラインで複数のスクリプトを指定できる、
NAWK の関数を全て含み、systime() の実装されたものである。また、delete
が配列を一度に削除できなければいけない。
DOS 上での使用においては、メモリーをたくさん使う関係上 DOS エクステン
ダーに対応しているもの以外では満足に動かないこともある（使えないわけで
はないが大規模な計算はできない、ということである）。作者が動作を確認し
ているものは以下の処理系である。
* cwsdpmi(0.90+(r4)) + gawk+mb(3.0.4+1.12)

使い方
------
コマンドラインでの起動は以下のとおり。

> iawk -f af.awk [-f scripts] [datafiles]

iawk は @include を処理するプリプロセッサーである。詳しくは「@include
の活用」の項で説明する。

datafile が与えられた場合、その datafile に書かれた（datafile の書き方
は後述）計算を実行する。与えられなければ対話的に計算を行うことができる。

場合によっては af.awk を使用しないこともできる。af.awk は入力された文
字列の解釈を行う部分である。つまり、ライブラリーとして alib.awk のみを
使うことができる。

場合によっては alib.awk を使用しないこともできる。alib.awk は実際の計
算ルーチン及び、組み込み関数の定義部分である。この場合、af.awk の先頭
にある @include をコメントアウトする必要がある。

場合によっては af.awk も alib.awk も使用しないことができるが、それはこ
の説明書の守備範囲外である。

以下断りのない限り、両方のスクリプトを利用すると仮定する。

演算子
------
af.awk が解釈できる演算子には次のものがある。

 *	乗算
 /	除算
 +	加算
 -	減算
 \	剰余
 ^	冪乗
 !	階乗
 ()	括弧

意味は通常の数学的な算術である。ただし除算は常に整数で行われ、小数部分
が出た場合には切り捨てられる。

剰余の記号を使うと、その後に指定した数を法とする計算をする場合がある。
たとえば 4^(-2)\7 とすると、7 を法とした 4 の逆元の二乗を計算する。し
かし、除算は逆元を掛けず、除算の結果の剰余を求める。適宜使い分けて欲し
い。

関数
----
af.awk が解釈する関数には次のものがある。

 sqrt(n)	n の平方根を越えない最大の整数
 isprime(n)	n の素数判定
 isprimew(n)	n の素数判定
 factor(n)	n の素因数分解。
 gcd(a,b)	a と b の最大公約数
 lcm(a,b)	a と b の最小公倍数
 psp(n,b)	n の基 b での擬素数判定
 Legendre(a,p)	ルジャンドル記号 (a/p)
 spsp(n,b,p)	n の基 b でのp-強擬素数判定

ここで a b n は整数。p は素数を表す。

二つの素数判定は方法が違う。isprimew は Wilson の定理を使う馬鹿げた方
法である。isprime は 100000000 以下は試し割り算を使う。それより大きい
数に関しては apr.awk を必要とするのでそちらの説明を参照のこと。

強擬素数判定は作者が定義を多少拡張した。普通の意味での強擬素数判定は 
spsp(n,b,2) に相当する。

コメント
--------
行頭に # を置くことで、その行を注釈行とすることができる。行頭以外の場
所での # は注釈を意味しない（といって別の意味もないのでただのエラーで
ある）。

ヒストリー
----------
% で直前の計算結果を参照できる。
さらに、%n で n 番目の計算結果を参照することができる。ただし、結果は25
個しか保存せず、コメント行、変数の代入もその中に含まれる。

変数
----
Fibonacchi Edition から変数を使うことができるようになった。基本的には
変数名は英数字で書くといいと思うが、日本語でも構わない（これは、単純に
連想配列の添字としてその文字列を使っているからである）。
代入は
変数名 = 式
という形式で行う。注意しておくが代入は式ではないので、二つの変数に同時
に代入することはできない。

終了
----
"quit" という文字列が入力として与えられると、終了する。

datafile
--------
datafile とは式・コメントまたは代入を一行に一つずつ書いたテキストファ
イルをさす。ここで式とは、演算子・関数・ヒストリーを用いた算術式または
文字列 "quit" である。

内部関数
--------
ここでは、alib.awk の中で定義されている関数について説明する。

 _add(a,b)	a と b の和。ただし、a b ともに正数とする。
 _multiple(a,b)	a と b の積。ただし、a b ともに 80 桁以下。
 _subtract(a,b)	a と b の差。ただし、a b ともに正数とする。
 add(a,b)	a と b の和。実質的に符号を決めているだけ。
 dectobin(a)	a を１０進数から２進数に直す。
 double(a)	a の２倍。
 factorial(a)	a の階乗。fac.tbl を参照する。
 fsqrt(a)	a の平方根を越えない最大の整数を返す。
 gcd(a,b)	a と b の最大公約数。ユークリッドの互除法。
 isbigger(a,b)	a が b より大きいかどうか。正数を仮定。
 isprime(a)	a の素数判定。
 isprime_trial_division(a)	a の試し割り算による素数判定。
 isprime_wilson(a)	a の Wilson の定理による素数判定。
 issquare(a)	a が平方数かどうか。
 lcm(a,b)	a と b の最小公倍数。
 mod(a,b)	a の b を法とした正の最小剰余。
 mod_factorial(a,b)	a の階乗の b での剰余。
 mod_fsqrt(a,b)	a の b を法とする平方根。
 mod_inverse(a,b)	a の法 b での逆元。
 mod_multiple(a,b,m)	a と b の積の m での剰余。
 mod_power(a,b,m)	a の m を法とする b 乗。
 mod_quotient(a,b,m)	a の b による商の m による剰余。
 mod_square(a,b)	a の二乗の b による剰余。
 multiple(a,b)	a と b の積。
 normalize(a)	空文字列を０にするなど。
 power(a,b)	a の b 乗。
 primitive_root(p)	p の原始根。
 psp(a,b)	a の基 b での擬素数判定。
 quotient(a,b)	a の b による商。
 quotient2(a)	a の半分。
 spsp(a,b,p)	a の基 b でのp-擬素数判定。
 square(a)	a の平方。
 subtract(a,b)	a と b の差。
 suc(a)	a の次の数。
 zeros(a)	a 個のゼロの並び。
 cubrt(a)	a の立方根。
 pred(a)	a の前の数。
 Legendre(a,p)	a の 素数 p での平方剰余判定。
 isodd(a)	a が奇数かどうか
 iseven(a)	a が偶数かどうか

更に詳細な説明は、するつもりがないのでスクリプト本体を参照せよ。

補助的に使用するファイル
------------------------
階乗を計算するのは手間であるので、一度計算した結果は fac.tbl に付け足
される。fac.tbl が更新されたらソートしておくことを勧める。

百万以下の素数が prime.tbl に納められているものとする。これには書き込
みも削除も行わない。ver.-3.5 にはファイル自体が含まれていたが ver.-3.6
以降は ptable.awk というスクリプトだけを配布することにしたので、
prime.tbl がなければこれを使って生成して欲しい（もちろん他の手段で生成
しても構わない）。
なお、ver.-3.5 で配布していた prime.tbl は正しくない情報が含まれている。
（289 という数が含まれていればこの間違いを含んだ物である。）したがって、
この場合は、必ず新しい prime.tbl に置き換えて欲しい。

@include の活用
---------------
前のバージョンで、alib.awk の中で、apr.awk の関数を呼び出しているため
に、それを同時に呼ぶか、ad hoc に関数定義を加えるかというような本来し
なくていいような対処をさせてしまった。その煩わしさを解消するために
@include を使うことにした。スクリプトの中に

@include filename

という一行を書くことで、filename を呼び出す。この機能を使うためには、
gawk 3.x を使っている場合は付属の igawk を、それ以外の DOS 上の awk 処
理系を使っている場合には nifty:FGALTS/mes/19/250 の iawk を使えばよい。
詳しくはそれぞれの説明文書を参照してもらうとして、大雑把に言えば、コマ
ンドラインで、

> iawk -f af.awk [-f scripts] [datafiles]

などとすると、@include を処理してから指定された awk 処理系にスクリプト
を渡してくれる。af.awk では 

@include alib.awk

としてある。さらに alib.awk では、最初に次のような行がある。

@include noapr.awk
#@include apr.awk

これにより、普段は使わない apr.awk を使わずに済ませ、それを使う時には
コメントアウトを逆転するだけでよいようになった。

DOS 以外でかつ gawk 3.x でない処理系の方は、今までと同じ対処法をお願い
することになる。あるいは、@include を処理するものを作っていただければ
なお結構である。

Goldbach Ed. からの変更点
-------------------------
* prev をより一般的な pred とした。（prev も使えるが、将来的には削除予
定である）
* mod() に負の数を渡した時に不当に遅かったのを改善。
* isbigger() を負の数にも対応させた。
* issquare() を（多少）高速化。
* quotient2() を（多少）高速化。
* suc() のバグ修正。
* 因数分解関係の関数を書き直し、別ファイル pfac.awk, SQUFOF.awk に移し
た。nopfac.awk を添付。基本的に factorize() だけが外から呼ばれ、他の関
数は factorize() からだけ呼ばれるような形になっている。
 factorize(a)	a の素因数分解。大きめの数には SQUFOF 法を使用。
* delete の書式をできるだけ一発消去方式に統一。
* isodd(), iseven() 追加。

Fibonacci Ed. から Goldbach Ed. への変更点
------------------------------------------
* @include の使用を始めた。
* noapr.awk の添付。

ver.-3.6 から Fibonacci Ed. への変更点
--------------------------------------
* af.awk で変数を使えるようにした。
* next の除去が不完全だったのを修正。
* 式の解釈が誤っていた部分を修正。
* 本説明書を一部修正した。

ver.-3.5 から ver.-3.6 への変更点
---------------------------------
* 因数分解が正常な結果を返さないバグを修正した。（のとや(GFC02252@
niftyserve.or.jp)氏の指摘による）
* Legendre() を apr.awk から alib.awk に移動した。
* prime.tbl を配布パッケージから除外した。その代わり、生成スクリプト 
ptable.awkを添付した。
* 関数に間違った値を渡した場合の対処法を変更した。next を呼ぶ代わりに
0 を返すようにした。当然のことながら、エラーメッセージが出た場合の戻り
値は意味を持たない。
* apr.awk 関連ファイルも含めて配布するようにした。
* 本説明書を一部修正した。

著作権・無保証
--------------
著作権は全面的に作者 松井鉄史(Fe2+:VED03370@nifty.ne.jp)が保持する。
転載、再配布は、その場所を作者にメールその他の手段で連絡することを条件
に、認める。改変を加えた場合は、その改変箇所を明示することが合わせて必
要である。

このスクリプトの実行結果に関しては、いかなる責任も作者は負わない。

質問等はメールか、または nifty:FGALTS/mes/6 にて受け付ける。

$$
